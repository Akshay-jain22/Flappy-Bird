'''Flappy Bird Game by Akshay Jain'''

# values which seems to be raw are generated by hit & trial method
import random # For generating random pipes
import sys # We will use sys.exit to exit the program
import pygame 
from pygame.locals import * # Basic Pygame Immports


#Global Variables for game
FPS = 35 # Frames per second
SCREEENWIDTH = 360
SCREEENHEIGHT = 640
SCREEN = pygame.display.set_mode((SCREEENWIDTH, SCREEENHEIGHT))
GAME_SPRITES = {}
GAME_SOUNDS = {}


def getRandomPipe():
    # Generate position of two pipes(one bottom straight and one top rotated) for blitting on screen
    pipeHeight = GAME_SPRITES['pipe'][0].get_height()
    offset = SCREEENHEIGHT/3
    y2 = offset + random.randrange(0,int(SCREEENHEIGHT - GAME_SPRITES['base'].get_height() - 1.2*offset))
    y1 = pipeHeight - y2 + offset
    x = SCREEENWIDTH + 20
    pipe = [
        {'x':x, 'y': -y1},
        {'x':x, 'y':y2}
    ]
    return pipe

def isCollide(playerx, playery, upperPipes, lowerPipes, basey):
    if playery==basey-GAME_SPRITES['player'].get_height() or playery<0:
        GAME_SOUNDS['hit'].play()
        return True

    for pipe in upperPipes:
        pipeHeight = GAME_SPRITES['pipe'][0].get_height()
        if playery < pipeHeight+pipe['y'] and abs(playerx-pipe['x'])<GAME_SPRITES['pipe'][0].get_width() :
            GAME_SOUNDS['hit'].play()
            return True

    for pipe in lowerPipes:
        pipeHeight = GAME_SPRITES['pipe'][0].get_height()
        if playery+GAME_SPRITES['player'].get_height() > pipe['y'] and abs(playerx-pipe['x'])<GAME_SPRITES['pipe'][0].get_width() :
            GAME_SOUNDS['hit'].play()
            return True

    return False

def welcomeScreen():
    # Shows welcome images on screen

    playerx = int(SCREEENWIDTH/5)
    playery = int((SCREEENHEIGHT - GAME_SPRITES['player'].get_height())/2)
    messagex = int((SCREEENWIDTH - GAME_SPRITES['message'].get_width())/2)
    messagey = 0
    basex = 0
    basey = int(SCREEENHEIGHT - GAME_SPRITES['base'].get_height())

    while True :
        for event in pygame.event.get():
            # if user clicks on cross button, close the game
            if event.type == QUIT or (event.type==KEYDOWN and event.key==K_ESCAPE):
                GAME_SOUNDS['die'].play()
                pygame.quit()
                sys.exit()
            
            # If the user presses space or up key, start the game for them
            elif event.type==KEYDOWN and (event.key==K_SPACE or event.key==K_UP):
                return
            
            else:
                SCREEN.blit(GAME_SPRITES['background'], (0,0))
                SCREEN.blit(GAME_SPRITES['base'], (basex,basey))
                SCREEN.blit(GAME_SPRITES['message'], (messagex,messagey))
                pygame.display.update()
                FPSCLOCK.tick(FPS)

def Game():
    score = 0
    playerx = int(SCREEENWIDTH/5)
    playery = int((SCREEENHEIGHT - GAME_SPRITES['player'].get_height())/2)
    basex = 0
    basey = int(SCREEENHEIGHT - GAME_SPRITES['base'].get_height())
    
    # Create 2 pipes for random blitting on screen
    newPipe1 = getRandomPipe()
    newPipe2 = getRandomPipe()

    # My list of upper pipes
    upperPipes = [
        {'x':SCREEENWIDTH+200, 'y':newPipe1[0]['y']},
        {'x':(SCREEENWIDTH*1.5)+200, 'y':newPipe2[0]['y']},
    ]

    # My list of lower pipes
    lowerPipes = [
        {'x':SCREEENWIDTH+200, 'y':newPipe1[1]['y']},
        {'x':(SCREEENWIDTH*1.5)+200, 'y':newPipe2[1]['y']},
    ]

    pipeVelocityX = -4

    playerVelY = -9
    playerMaxVelocityY = 10
    playerMinVelocityY = -8
    playerAccY = 1

    playerFlapAccv = -8 #velocity while flapping
    playerFlapped = False # It is true when bird is flapping

    while True:
        for event in pygame.event.get():
            if event.type == QUIT or (event.type==KEYDOWN and event.key==K_ESCAPE) :
                GAME_SOUNDS['die'].play()
                pygame.quit()
                sys.exit()
            if event.type == KEYDOWN and (event.key==K_SPACE or event.key==K_UP):
                if playery > 0:
                    playerVelY = playerFlapAccv
                    playerFlapped = True
                    GAME_SOUNDS['wing'].play()

        crashTest = isCollide(playerx, playery, upperPipes, lowerPipes, basey) # It returns true if player is crashed
        if crashTest:
            GAME_SOUNDS['die'].play()
            SCREEN.blit(GAME_SPRITES['gameOver'], (0,0))
            pygame.display.update()
            FPSCLOCK.tick(FPS)
            return
        
        # check for scores
        playerMid = playerx + GAME_SPRITES['player'].get_width()/2
        for pipe in upperPipes:
            pipeMid = pipe['x'] + GAME_SPRITES['pipe'][0].get_width()/2
            if pipeMid <= playerMid < pipeMid+4:
                score+=1
                GAME_SOUNDS['point'].play()

        if playerVelY<playerMaxVelocityY and not playerFlapped:
            playerVelY += playerAccY
        
        if playerFlapped:
            playerFlapped=False
        playerHeight = GAME_SPRITES['player'].get_height()
        playery += min(playerVelY, basey - playery - playerHeight)

        # move pipes to the left
        for upperPipe , lowerPipe in zip(upperPipes, lowerPipes):
            upperPipe['x'] += pipeVelocityX
            lowerPipe['x'] += pipeVelocityX
        
        # Add a new pipe when first pipe is going to the left
        if 0<upperPipes[0]['x']<5:
            newpipe = getRandomPipe()
            upperPipes.append(newpipe[0])
            lowerPipes.append(newpipe[1])

        # if the pipe is out of the screen, remove it
        if upperPipes[0]['x'] < -GAME_SPRITES['pipe'][0].get_width():
            upperPipes.pop(0)
            lowerPipes.pop(0)

        # Lets blit the sprites
        SCREEN.blit(GAME_SPRITES['background'], (0, 0))
        for upperPipe, lowerPipe in zip(upperPipes, lowerPipes):
            SCREEN.blit(GAME_SPRITES['pipe'][0], (int(upperPipe['x']), int(upperPipe['y'])))
            SCREEN.blit(GAME_SPRITES['pipe'][1], (int(lowerPipe['x']), int(lowerPipe['y'])))
            
        SCREEN.blit(GAME_SPRITES['base'], (basex, basey))
        SCREEN.blit(GAME_SPRITES['player'], (playerx, playery))
        myDigits = [int(x) for x in list(str(score))]
        width = 0
        for digit in myDigits:
            width+= GAME_SPRITES['numbers'][digit].get_width()
        Xoffset = (SCREEENWIDTH - width)/2

        for digit in myDigits:
            SCREEN.blit(GAME_SPRITES['numbers'][digit], (int(Xoffset), int(SCREEENHEIGHT*0.05)))
            Xoffset += GAME_SPRITES['numbers'][digit].get_width()
             
        pygame.display.update() 
        FPSCLOCK.tick(FPS)




# This is the main function from where game starts
if __name__ == "__main__":
    pygame.init() # Initialise all pygame's modeules
    FPSCLOCK = pygame.time.Clock()
    pygame.display.set_caption('Flappy Bird by Akshay Jain')

    # Game sprites
    GAME_SPRITES['numbers'] = (
        pygame.image.load('gallery/sprites/0.png').convert_alpha(),
        pygame.image.load('gallery/sprites/1.png').convert_alpha(),
        pygame.image.load('gallery/sprites/2.png').convert_alpha(),
        pygame.image.load('gallery/sprites/3.png').convert_alpha(),
        pygame.image.load('gallery/sprites/4.png').convert_alpha(),
        pygame.image.load('gallery/sprites/5.png').convert_alpha(),
        pygame.image.load('gallery/sprites/6.png').convert_alpha(),
        pygame.image.load('gallery/sprites/7.png').convert_alpha(),
        pygame.image.load('gallery/sprites/8.png').convert_alpha(),
        pygame.image.load('gallery/sprites/9.png').convert_alpha(),
    )
    GAME_SPRITES['message'] = pygame.image.load(r'gallery/sprites/message.png').convert_alpha()
    GAME_SPRITES['gameOver'] = pygame.image.load(r'gallery/sprites/gameOver.png').convert_alpha()
    GAME_SPRITES['base'] = pygame.image.load(r'gallery/sprites/ground.png').convert_alpha()
    GAME_SPRITES['player'] = pygame.image.load(r'gallery/sprites/bird.png').convert_alpha()
    GAME_SPRITES['background'] = pygame.image.load(r'gallery/sprites/background.png').convert_alpha()
    GAME_SPRITES['pipe'] = (
        pygame.image.load(r'gallery/sprites/pipe.png').convert_alpha(),
        pygame.transform.rotate(pygame.image.load(r'gallery/sprites/pipe.png').convert_alpha(), 180)
    )

    # Game sounds
    GAME_SOUNDS['die'] = pygame.mixer.Sound('gallery/audio/die.wav')
    GAME_SOUNDS['hit'] = pygame.mixer.Sound('gallery/audio/hit.wav')
    GAME_SOUNDS['point'] = pygame.mixer.Sound('gallery/audio/point.wav')
    GAME_SOUNDS['swoosh'] = pygame.mixer.Sound('gallery/audio/swoosh.wav')
    GAME_SOUNDS['wing'] = pygame.mixer.Sound('gallery/audio/wing.wav')

    
    while True:
        welcomeScreen() # Shows welcome screen till play button is pressed
        Game() # This is the mainGame function
